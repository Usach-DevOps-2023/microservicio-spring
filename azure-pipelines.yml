trigger:
  - feature-ms-rodrigoCortes-mensaje

jobs:
  - job: JOB1
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
        git fetch --unshallow
      displayName: 'Convert to non-shallow Clone'

    - task: Gradle@3
      inputs:
          gradleWrapperFile: 'gradlew'
          workingDirectory: '$(Build.SourcesDirectory)'
          tasks: 'build test jacocoTestReport'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          sonarQubeRunAnalysis: false
          spotBugsAnalysis: false
      displayName: Build

    - script: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        threshold=85  # Set the desired code coverage threshold
        reportFile=$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml
        coverage=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@covered)" $reportFile)
        total=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@missed)" $reportFile)
        percentage=$(echo "scale=2; ($coverage / ($coverage + $total)) * 100" | bc)
        echo "Code coverage: $percentage%"
        if (( $(echo "$percentage < $threshold" | bc -l) )); then
          echo "Code coverage is below the threshold of $threshold%"
          exit 1
        fi
      displayName: 'Validate Code Coverage'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
        failIfCoverageEmpty: true
      displayName: 'Publish Code Coverage Results'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'usach-devops-2023'
        projectKey: 'Usach-DevOps-2023_microservicio-spring'
        projectName: 'microservicio-spring'
      displayName: 'SonarCloud Prepare'

    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        workingDirectory: '$(Build.SourcesDirectory)'
        tasks: 'sonarqube'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'specify'
        sonarQubeGradlePluginVersion: '3.3'
        spotBugsAnalysis: false
      displayName: Run SonarCloud

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        command: 'login'
      displayName: 'Docker Login'

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'rcortesz/microservicio-laboratory'
        command: 'build'
        Dockerfile: '**/Dockerfile'
      displayName: 'Docker Build'

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'rcortesz/microservicio-laboratory'
        command: 'push'
      displayName: 'Docker Push'

  - job:
    dependsOn: JOB1

    pool: 'default'
    
    steps:
    
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        command: 'login'
      displayName: 'Docker Login'
    
    #- task: CmdLine@2
    #  displayName: 'Run Docker Image'
    #  inputs:
    #    script: |
    #      docker run --rm -p 8080:8080 --name microservicespring rcortesz/microservicio-laboratory:128

  - job: JOB3
    dependsOn: JOB2

    pool: 'default'
    
    steps:

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'Invoke-WebRequest -Uri "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.5.zip -OutFile $(Agent.TempDirectory)'
      displayName: 'Download JMeter Distribution'

    - task: ExtractFiles@1
      displayName: 'Extract JMeter'
      inputs:
        archiveFilePatterns: '$(Agent.TempDirectory)/apache-jmeter-5.5.zip'
        destinationFolder: '$(Agent.TempDirectory)/jmeter'

    - task: PowerShell@2
      displayName: 'Set JMeter Path'
      inputs:
        targetType: 'inline'
        script: |
          $env:JMETER_HOME = '$(Agent.TempDirectory)\jmeter\apache-jmeter-5.5'
          $env:PATH += ";$env:JMETER_HOME\bin"

    - script: |
        jmeter -n -t $(Agent.TempDirectory)/jmeter/test/PerformanceTesting.jmx -l $(Agent.TempDirectory)/jmeter/result/results.jtl
      displayName: 'Run JMeter Tests'