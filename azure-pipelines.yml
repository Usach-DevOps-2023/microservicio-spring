trigger:
  - feature-ms-rodrigoCortes-mensaje

jobs:
  - job: JOB1
    displayName: '1: Build/Test/Coverage/Sonar/Docker'
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
        git fetch --unshallow
      displayName: 'Convert to non-shallow Clone'

    - task: Gradle@3
      inputs:
          gradleWrapperFile: 'gradlew'
          workingDirectory: '$(Build.SourcesDirectory)'
          tasks: 'build test jacocoTestReport'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          sonarQubeRunAnalysis: false
          spotBugsAnalysis: false
      displayName: Build

    - script: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        threshold=85  # Set the desired code coverage threshold
        reportFile=$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml
        coverage=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@covered)" $reportFile)
        total=$(xmllint --xpath "sum(//counter[@type='INSTRUCTION']/@missed)" $reportFile)
        percentage=$(echo "scale=2; ($coverage / ($coverage + $total)) * 100" | bc)
        echo "Code coverage: $percentage%"
        if (( $(echo "$percentage < $threshold" | bc -l) )); then
          echo "Code coverage is below the threshold of $threshold%"
          exit 1
        fi
      displayName: 'Validate Code Coverage'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'JaCoCo'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
        pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
        reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
        failIfCoverageEmpty: true
      displayName: 'Publish Code Coverage Results'

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'usach-devops-2023'
        projectKey: 'Usach-DevOps-2023_microservicio-spring'
        projectName: 'microservicio-spring'
      displayName: 'SonarCloud Prepare'

    - task: Gradle@3
      inputs:
        gradleWrapperFile: 'gradlew'
        workingDirectory: '$(Build.SourcesDirectory)'
        tasks: 'sonarqube'
        publishJUnitResults: false
        javaHomeOption: 'JDKVersion'
        sonarQubeRunAnalysis: true
        sqGradlePluginVersionChoice: 'specify'
        sonarQubeGradlePluginVersion: '3.3'
        spotBugsAnalysis: false
      displayName: Run SonarCloud

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        command: 'login'
      displayName: 'Docker Login'

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'rcortesz/microservicio-laboratory'
        command: 'build'
        Dockerfile: '**/Dockerfile'
      displayName: 'Docker Build'

    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        repository: 'rcortesz/microservicio-laboratory'
        tags: $(Build.BuildId)
        command: 'push'
      displayName: 'Docker Push'

  - job: JOB2
    displayName: '2: Deploy Service & Performance Test'
    dependsOn: JOB1

    pool: 'default'
    
    steps:
    
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker'
        command: 'login'
      displayName: 'Docker Login'
      condition: 
  
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: 'kubectl delete deployment microservicespring --ignore-not-found=true'
      displayName: 'Delete existing Deployment'

    - task: Kubernetes@1
      inputs:
        connectionType: 'None'
        command: 'create'
        arguments: 'deployment microservicespring --image=rcortesz/microservicio-laboratory:$(Build.BuildId)' #132
        secretType: 'dockerRegistry'
        containerRegistryType: 'Azure Container Registry'
      displayName: 'Deploy Service K8s'

    - task: PowerShell@2
      displayName: 'Run Performance Test'
      inputs:
        targetType: 'inline'
        script: |
          Start-Sleep -s 5
          echo "Running Forward"
          $job = Start-Job -ScriptBlock {
              kubectl port-forward deploy/microservicespring 8080:8080
          }
          echo "Run JMeter Tests"
          Invoke-Command -ScriptBlock {
          cd $(Agent.HomeDirectory)\jmeter\apache-jmeter-5.5\bin
          .\jmeter -n -t $(Agent.HomeDirectory)\jmeter\test\PerformanceTesting.jmx -l $(Agent.HomeDirectory)\jmeter\result\results.jtl
          }
          echo "Finished JMeter Tests"
          echo "****************************************** Validating Service ******************************************"
          $req=Invoke-WebRequest -uri "http://localhost:8080/greeting"; Write-output "Status Code: $($req.StatusCode) - Content: $($req.Content)"
          echo "**************************************** Finalizando Laboratorio ****************************************"
          Stop-Job $job